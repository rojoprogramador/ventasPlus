<template>
  <AuthenticatedLayout>
    <template #header>
      <h2 class="text-xl font-semibold leading-tight text-gray-800">Registro de Venta</h2>
    </template>
const mostrarModalError = ref(false);
const mensajeError = ref('');
const cambioCalculado = ref(0);
const ventaId = ref(null);

// Métodos de pago disponibles
const metodosPago = [
  { id: 'efectivo', nombre: 'Efectivo' },
  { id: 'tarjeta', nombre: 'Tarjeta' },
  { id: 'transferencia', nombre: 'Transferencia' }
];

// Computed properties
const puedeFinalizarVenta = computed(() => {
  if (carrito.value.length === 0) return false;
  
  if (metodoPagoSeleccionado.value === 'efectivo') {
    return montoRecibido.value >= calcularTotal();
  }
  
  return true;
});

// Métodos
const buscarProductos = async () => {
  if (!busqueda.value) {
    errorBusqueda.value = 'Debe ingresar un texto para buscar';
    return;
  }
  
  errorBusqueda.value = '';
  
  try {
    const response = await axios.get(route('ventas.buscar-productos'), {
      params: { busqueda: busqueda.value }
    });
    
    productosEncontrados.value = response.data.productos;
    
    if (productosEncontrados.value.length === 0) {
      errorBusqueda.value = 'No se encontraron productos';
    }
  } catch (error) {
    console.error('Error al buscar productos:', error);
    errorBusqueda.value = 'Error al buscar productos';
  }
};

const agregarAlCarrito = (producto) => {
  // Verificar si el producto ya está en el carrito
  const indiceExistente = carrito.value.findIndex(item => item.id === producto.id);
  
  if (indiceExistente >= 0) {
    // Si ya existe, aumentar cantidad si hay stock disponible
    if (carrito.value[indiceExistente].cantidad < producto.stock) {
      carrito.value[indiceExistente].cantidad++;
    }
  } else {
    // Si no existe, agregarlo con cantidad 1
    carrito.value.push({
      ...producto,
      cantidad: 1
    });
  }
  
  // Limpiar resultados de búsqueda
  productosEncontrados.value = [];
  busqueda.value = '';
};

const eliminarDelCarrito = (index) => {
  carrito.value.splice(index, 1);
};

const aumentarCantidad = (index) => {
  const item = carrito.value[index];
  if (item.cantidad < item.stock) {
    item.cantidad++;
  }
};

const disminuirCantidad = (index) => {
  if (carrito.value[index].cantidad > 1) {
    carrito.value[index].cantidad--;
  }
};

const validarCantidad = (index) => {
  const item = carrito.value[index];
  
  // Asegurar que la cantidad sea un número válido
  if (isNaN(item.cantidad) || item.cantidad < 1) {
    item.cantidad = 1;
  }
  
  // Asegurar que no exceda el stock disponible
  if (item.cantidad > item.stock) {
    item.cantidad = item.stock;
  }
};

const calcularTotal = () => {
  return carrito.value.reduce((total, item) => {
    return total + (item.precio_venta * item.cantidad);
  }, 0);
};

const confirmarCancelarVenta = () => {
  if (carrito.value.length > 0) {
    mostrarModalCancelar.value = true;
  } else {
    // Si no hay productos, simplemente redireccionar al dashboard
    router.visit(route('dashboard'));
  }
};

const cancelarVenta = () => {
  axios.post(route('ventas.cancelar'))
    .then(() => {
      router.visit(route('dashboard'));
    })
    .catch(error => {
      console.error('Error al cancelar la venta:', error);
    });
};

const finalizarVenta = async () => {
  if (carrito.value.length === 0) {
    mensajeError.value = 'Debe agregar al menos un producto para registrar la venta';
    mostrarModalError.value = true;
    return;
  }
  
  if (metodoPagoSeleccionado.value === 'efectivo' && montoRecibido.value < calcularTotal()) {
    mensajeError.value = 'El monto recibido es menor al total de la venta';
    mostrarModalError.value = true;
    return;
  }
  
  try {
    const response = await axios.post(route('ventas.store'), {
      productos: carrito.value,
      tipo_pago: metodoPagoSeleccionado.value,
      monto_recibido: montoRecibido.value
    });
    
    // Si la venta se procesó correctamente
    if (response.data.success) {
      ventaId.value = response.data.venta.id;
      cambioCalculado.value = response.data.cambio;
      mostrarModalExito.value = true;
    }
  } catch (error) {
    console.error('Error al procesar la venta:', error);
    
    // Mostrar mensaje de error
    if (error.response && error.response.data.message) {
      mensajeError.value = error.response.data.message;
    } else {
      mensajeError.value = 'Ha ocurrido un error al procesar la venta';
    }
    
    mostrarModalError.value = true;
  }
};

const verComprobante = () => {
  if (ventaId.value) {
    router.visit(route('ventas.comprobante', ventaId.value));
  }
};

const nuevaVenta = () => {
  // Reiniciar todo
  carrito.value = [];
  busqueda.value = '';
  errorBusqueda.value = '';
  productosEncontrados.value = [];
  metodoPagoSeleccionado.value = 'efectivo';
  montoRecibido.value = 0;
  mostrarModalExito.value = false;
  ventaId.value = null;
};
</script>

    <div class="py-6">
      <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
        <div class="overflow-hidden bg-white shadow-sm sm:rounded-lg">
          <div class="p-6 bg-white border-b border-gray-200">
            
            <!-- Búsqueda de productos -->
            <div class="mb-6">
              <label for="busqueda" class="block mb-2 text-sm font-medium text-gray-700">
                Buscar producto (por nombre o código de barras)
              </label>
              <div class="flex">
                <input 
                  type="text" 
                  id="busqueda" 
                  v-model="busqueda" 
                  @keyup.enter="buscarProductos"
                  class="flex-1 p-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  :class="{'border-red-500': errorBusqueda}"
                  placeholder="Ingrese nombre o código del producto"
                />
                <button 
                  @click="buscarProductos" 
                  class="px-4 py-2 font-bold text-white bg-blue-500 rounded-r-md hover:bg-blue-700 focus:outline-none focus:shadow-outline"
                >
                  Buscar
                </button>
              </div>
              <p v-if="errorBusqueda" class="mt-1 text-sm text-red-500">{{ errorBusqueda }}</p>
            </div>
            
            <!-- Resultados de la búsqueda -->
            <div v-if="productosEncontrados.length > 0" class="mb-6">
              <h3 class="mb-3 text-lg font-semibold">Resultados de la búsqueda</h3>
              <div class="overflow-x-auto">
                <table class="min-w-full bg-white">
                  <thead class="bg-gray-100">
                    <tr>
                      <th class="px-4 py-2 text-left">Código</th>
                      <th class="px-4 py-2 text-left">Nombre</th>
                      <th class="px-4 py-2 text-left">Descripción</th>
                      <th class="px-4 py-2 text-left">Precio</th>
                      <th class="px-4 py-2 text-left">Stock</th>
                      <th class="px-4 py-2 text-left">Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="producto in productosEncontrados" :key="producto.id" class="border-b hover:bg-gray-50">
                      <td class="px-4 py-2">{{ producto.codigo }}</td>
                      <td class="px-4 py-2">{{ producto.nombre }}</td>
                      <td class="px-4 py-2">{{ producto.descripcion }}</td>
                      <td class="px-4 py-2">${{ producto.precio_venta }}</td>
                      <td class="px-4 py-2">{{ producto.stock }}</td>
                      <td class="px-4 py-2">
                        <button 
                          @click="agregarAlCarrito(producto)" 
                          class="px-3 py-1 text-sm text-white bg-green-500 rounded hover:bg-green-600"
                        >
                          Agregar
                        </button>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
            
            <!-- Productos en el carrito -->
            <div class="mb-6">
              <h3 class="mb-3 text-lg font-semibold">Productos en la venta</h3>
              
              <div v-if="carrito.length === 0" class="p-4 text-center text-gray-500 bg-gray-100 rounded">
                Aún no hay productos agregados a la venta
              </div>
              
              <div v-else class="overflow-x-auto">
                <table class="min-w-full bg-white">
                  <thead class="bg-gray-100">
                    <tr>
                      <th class="px-4 py-2 text-left">Código</th>
                      <th class="px-4 py-2 text-left">Nombre</th>
                      <th class="px-4 py-2 text-left">Precio</th>
                      <th class="px-4 py-2 text-left">Cantidad</th>
                      <th class="px-4 py-2 text-left">Subtotal</th>
                      <th class="px-4 py-2 text-left">Acciones</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="(item, index) in carrito" :key="index" class="border-b hover:bg-gray-50">
                      <td class="px-4 py-2">{{ item.codigo }}</td>
                      <td class="px-4 py-2">{{ item.nombre }}</td>
                      <td class="px-4 py-2">${{ item.precio_venta }}</td>
                      <td class="px-4 py-2">
                        <div class="flex items-center">
                          <button 
                            @click="disminuirCantidad(index)" 
                            class="px-2 py-1 text-white bg-gray-500 rounded-l hover:bg-gray-600"
                            :disabled="item.cantidad <= 1"
                          >-</button>
                          <input 
                            type="number" 
                            v-model.number="item.cantidad" 
                            min="1" 
                            :max="item.stock"
                            class="w-16 px-2 py-1 text-center border"
                            @change="validarCantidad(index)"
                          />
                          <button 
                            @click="aumentarCantidad(index)" 
                            class="px-2 py-1 text-white bg-gray-500 rounded-r hover:bg-gray-600"
                            :disabled="item.cantidad >= item.stock"
                          >+</button>
                        </div>
                      </td>
                      <td class="px-4 py-2">${{ (item.precio_venta * item.cantidad).toFixed(2) }}</td>
                      <td class="px-4 py-2">
                        <button 
                          @click="eliminarDelCarrito(index)" 
                          class="px-3 py-1 text-sm text-white bg-red-500 rounded hover:bg-red-600"
                        >
                          Eliminar
                        </button>
                      </td>
                    </tr>
                  </tbody>
                  <tfoot class="bg-gray-50">
                    <tr>
                      <td colspan="4" class="px-4 py-2 text-right font-bold">Total:</td>
                      <td class="px-4 py-2 font-bold">${{ calcularTotal().toFixed(2) }}</td>
                      <td></td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            </div>
            
            <!-- Selección de método de pago -->
            <div class="mb-6">
              <h3 class="mb-3 text-lg font-semibold">Método de pago</h3>
              
              <div class="flex flex-wrap gap-4">
                <div v-for="metodo in metodosPago" :key="metodo.id" class="flex items-center">
                  <input 
                    type="radio" 
                    :id="metodo.id" 
                    :value="metodo.id" 
                    v-model="metodoPagoSeleccionado" 
                    class="mr-2"
                  />
                  <label :for="metodo.id" class="text-gray-700">{{ metodo.nombre }}</label>
                </div>
              </div>
              
              <!-- Pago en efectivo - Cálculo del cambio -->
              <div v-if="metodoPagoSeleccionado === 'efectivo'" class="mt-4">
                <label for="monto_recibido" class="block mb-2 text-sm font-medium text-gray-700">
                  Monto recibido
                </label>
                <div class="flex items-center">
                  <span class="mr-2">$</span>
                  <input 
                    type="number" 
                    id="monto_recibido" 
                    v-model.number="montoRecibido" 
                    class="p-2 border border-gray-300 rounded focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    min="0"
                    step="0.01"
                  />
                </div>
                
                <div v-if="montoRecibido >= calcularTotal()" class="mt-2">
                  <p class="font-semibold text-green-600">
                    Cambio a devolver: ${{ (montoRecibido - calcularTotal()).toFixed(2) }}
                  </p>
                </div>
                <div v-else-if="montoRecibido > 0" class="mt-2">
                  <p class="font-semibold text-red-600">
                    Monto insuficiente. Faltan: ${{ (calcularTotal() - montoRecibido).toFixed(2) }}
                  </p>
                </div>
              </div>
            </div>
            
            <!-- Botones de acción -->
            <div class="flex justify-end gap-4 mt-6">
              <button 
                @click="confirmarCancelarVenta" 
                class="px-6 py-2 font-bold text-white bg-gray-500 rounded hover:bg-gray-600 focus:outline-none focus:shadow-outline"
              >
                Cancelar Venta
              </button>
              
              <button 
                @click="finalizarVenta" 
                class="px-6 py-2 font-bold text-white bg-green-500 rounded hover:bg-green-600 focus:outline-none focus:shadow-outline"
                :disabled="!puedeFinalizarVenta"
              >
                Finalizar Venta
              </button>
            </div>
            
            <!-- Modal de confirmación para cancelar venta -->
            <div v-if="mostrarModalCancelar" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
              <div class="p-8 bg-white rounded shadow-xl">
                <h3 class="mb-4 text-lg font-bold">Confirmar cancelación</h3>
                <p>¿Estás seguro de que deseas cancelar esta venta? Se perderán todos los productos agregados.</p>
                <div class="flex justify-end gap-4 mt-6">
                  <button 
                    @click="mostrarModalCancelar = false" 
                    class="px-4 py-2 font-bold text-white bg-gray-500 rounded hover:bg-gray-600"
                  >
                    No, continuar
                  </button>
                  <button 
                    @click="cancelarVenta" 
                    class="px-4 py-2 font-bold text-white bg-red-500 rounded hover:bg-red-600"
                  >
                    Sí, cancelar
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Modal de éxito -->
            <div v-if="mostrarModalExito" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
              <div class="p-8 bg-white rounded shadow-xl">
                <h3 class="mb-4 text-xl font-bold text-green-600">¡Venta registrada exitosamente!</h3>
                <p>La venta se ha registrado correctamente.</p>
                <p v-if="metodoPagoSeleccionado === 'efectivo'" class="mt-2 font-semibold">
                  Cambio a devolver: ${{ cambioCalculado.toFixed(2) }}
                </p>
                <div class="flex justify-end gap-4 mt-6">
                  <button 
                    @click="verComprobante" 
                    class="px-4 py-2 font-bold text-white bg-blue-500 rounded hover:bg-blue-600"
                  >
                    Ver comprobante
                  </button>
                  <button 
                    @click="nuevaVenta" 
                    class="px-4 py-2 font-bold text-white bg-green-500 rounded hover:bg-green-600"
                  >
                    Nueva venta
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Modal de error -->
            <div v-if="mostrarModalError" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
              <div class="p-8 bg-white rounded shadow-xl">
                <h3 class="mb-4 text-xl font-bold text-red-600">Error al procesar la venta</h3>
                <p>{{ mensajeError }}</p>
                <div class="flex justify-end mt-6">
                  <button 
                    @click="mostrarModalError = false" 
                    class="px-4 py-2 font-bold text-white bg-blue-500 rounded hover:bg-blue-600"
                  >
                    Entendido
                  </button>
                </div>
              </div>
            </div>
            
          </div>
        </div>
      </div>
    </div>
  </AuthenticatedLayout>
</template>

<script setup>
import { ref, computed } from 'vue';
import { router } from '@inertiajs/vue3';
import axios from 'axios';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';

// Variables reactivas
const busqueda = ref('');
const errorBusqueda = ref('');
const productosEncontrados = ref([]);
const carrito = ref([]);
const metodoPagoSeleccionado = ref('efectivo');
const montoRecibido = ref(0);
const mostrarModalCancelar = ref(false);
const mostrarModalExito = ref(false);
const mostrarModalError = ref(false);
const mensajeError = ref('');
const cambioCalculado = ref(0);
const ventaId = ref(null);

// Métodos de pago disponibles
const metodosPago = [
  { id: 'efectivo', nombre: 'Efectivo' },
  { id: 'tarjeta', nombre: 'Tarjeta' },
  { id: 'transferencia', nombre: 'Transferencia' }
];

// Computed properties
const puedeFinalizarVenta = computed(() => {
  if (carrito.value.length === 0) return false;
  
  if (metodoPagoSeleccionado.value === 'efectivo') {
    return montoRecibido.value >= calcularTotal();
  }
  
  return true;
});

// Métodos
const buscarProductos = async () => {
  if (!busqueda.value) {
    errorBusqueda.value = 'Debe ingresar un texto para buscar';
    return;
  }
  
  errorBusqueda.value = '';
  
  try {
    const response = await axios.get(route('ventas.buscar-productos'), {
      params: { busqueda: busqueda.value }
    });
    
    productosEncontrados.value = response.data.productos;
    
    if (productosEncontrados.value.length === 0) {
      errorBusqueda.value = 'No se encontraron productos';
    }
  } catch (error) {
    console.error('Error al buscar productos:', error);
    errorBusqueda.value = 'Error al buscar productos';
  }
};

const agregarAlCarrito = (producto) => {
  // Verificar si el producto ya está en el carrito
  const indiceExistente = carrito.value.findIndex(item => item.id === producto.id);
  
  if (indiceExistente >= 0) {
    // Si ya existe, aumentar cantidad si hay stock disponible
    if (carrito.value[indiceExistente].cantidad < producto.stock) {
      carrito.value[indiceExistente].cantidad++;
    }
  } else {
    // Si no existe, agregarlo con cantidad 1
    carrito.value.push({
      ...producto,
      cantidad: 1
    });
  }
  
  // Limpiar resultados de búsqueda
  productosEncontrados.value = [];
  busqueda.value = '';
};

const eliminarDelCarrito = (index) => {
  carrito.value.splice(index, 1);
};

const aumentarCantidad = (index) => {
  const item = carrito.value[index];
  if (item.cantidad < item.stock) {
    item.cantidad++;
  }
};

const disminuirCantidad = (index) => {
  if (carrito.value[index].cantidad > 1) {
    carrito.value[index].cantidad--;
  }
};

const validarCantidad = (index) => {
  const item = carrito.value[index];
  
  // Asegurar que la cantidad sea un número válido
  if (isNaN(item.cantidad) || item.cantidad < 1) {
    item.cantidad = 1;
  }
  
  // Asegurar que no exceda el stock disponible
  if (item.cantidad > item.stock) {
    item.cantidad = item.stock;
  }
};

const calcularTotal = () => {
  return carrito.value.reduce((total, item) => {
    return total + (item.precio_venta * item.cantidad);
  }, 0);
};

const confirmarCancelarVenta = () => {
  if (carrito.value.length > 0) {
    mostrarModalCancelar.value = true;
  } else {
    // Si no hay productos, simplemente redireccionar al dashboard
    router.visit(route('dashboard'));
  }
};

const cancelarVenta = () => {
  axios.post(route('ventas.cancelar'))
    .then(() => {
      router.visit(route('dashboard'));
    })
    .catch(error => {
      console.error('Error al cancelar la venta:', error);
    });
};

const finalizarVenta = async () => {
  if (carrito.value.length === 0) {
    mensajeError.value = 'Debe agregar al menos un producto para registrar la venta';
    mostrarModalError.value = true;
    return;
  }
  
  if (metodoPagoSeleccionado.value === 'efectivo' && montoRecibido.value < calcularTotal()) {
    mensajeError.value = 'El monto recibido es menor al total de la venta';
    mostrarModalError.value = true;
    return;
  }
  
  try {
    const response = await axios.post(route('ventas.store'), {
      productos: carrito.value,
      tipo_pago: metodoPagoSeleccionado.value,
      monto_recibido: montoRecibido.value
    });
    
    // Si la venta se procesó correctamente
    if (response.data.success) {
      ventaId.value = response.data.venta.id;
      cambioCalculado.value = response.data.cambio;
      mostrarModalExito.value = true;
    }
  } catch (error) {
    console.error('Error al procesar la venta:', error);
    
    // Mostrar mensaje de error
    if (error.response && error.response.data.message) {
      mensajeError.value = error.response.data.message;
    } else {
      mensajeError.value = 'Ha ocurrido un error al procesar la venta';
    }
    
    mostrarModalError.value = true;
  }
};

const verComprobante = () => {
  if (ventaId.value) {
    router.visit(route('ventas.comprobante', ventaId.value));
  }
};

const nuevaVenta = () => {
  // Reiniciar todo
  carrito.value = [];
  busqueda.value = '';
  errorBusqueda.value = '';
  productosEncontrados.value = [];
  metodoPagoSeleccionado.value = 'efectivo';
  montoRecibido.value = 0;
  mostrarModalExito.value = false;
  ventaId.value = null;
};
</script>
